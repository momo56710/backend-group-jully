{
  "id": "express-backend-development",
  "title": "Express.js Backend Development Quiz",
  "description": "Test your knowledge of Express.js, Node.js, API development, and backend file structure",
  "category": "Backend Development",
  "difficulty": "Medium",
  "language": "en",
  "questions": [
    {
      "id": 1,
      "question": {
        "en": "What is Express.js?",
        "fr": "Qu'est-ce qu'Express.js ?",
        "ar": "ما هو Express.js؟"
      },
      "options": [
        "A frontend framework",
        "A web application framework for Node.js",
        "A database management system",
        "A testing framework"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.",
        "fr": "Express.js est un framework d'application web minimal et flexible pour Node.js qui fournit un ensemble robuste de fonctionnalités pour les applications web et mobiles.",
        "ar": "Express.js هو إطار عمل تطبيقات الويب بسيط ومرن لـ Node.js يوفر مجموعة قوية من الميزات لتطبيقات الويب والجوال."
      }
    },
    {
      "id": 2,
      "question": {
        "en": "How do you create an Express application?",
        "fr": "Comment créer une application Express ?",
        "ar": "كيف تنشئ تطبيق Express؟"
      },
      "options": [
        "const app = new Express();",
        "const app = express();",
        "const app = require('express');",
        "const app = Express.create();"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "You create an Express application by calling the express() function, which returns an Express application object.",
        "fr": "Vous créez une application Express en appelant la fonction express(), qui retourne un objet d'application Express.",
        "ar": "تنشئ تطبيق Express عن طريق استدعاء الدالة express()، والتي تُرجع كائن تطبيق Express."
      }
    },
    {
      "id": 3,
      "question": {
        "en": "What middleware is used to parse JSON request bodies?",
        "fr": "Quel middleware est utilisé pour analyser les corps de requête JSON ?",
        "ar": "أي middleware يُستخدم لتحليل أجسام طلبات JSON؟"
      },
      "options": [
        "express.urlencoded()",
        "express.json()",
        "express.text()",
        "express.raw()"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "express.json() is middleware that parses incoming requests with JSON payloads and is based on body-parser.",
        "fr": "express.json() est un middleware qui analyse les requêtes entrantes avec des charges utiles JSON et est basé sur body-parser.",
        "ar": "express.json() هو middleware يحلل الطلبات الواردة مع حمولات JSON ويستند إلى body-parser."
      }
    },
    {
      "id": 4,
      "question": {
        "en": "How do you define a GET route in Express.js?",
        "fr": "Comment définir une route GET dans Express.js ?",
        "ar": "كيف تحدد مسار GET في Express.js؟"
      },
      "options": [
        "app.get('/path', callback)",
        "app.route('/path').get(callback)",
        "app.GET('/path', callback)",
        "app.getRoute('/path', callback)"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "app.get() is used to define a GET route in Express.js, taking a path and a callback function as parameters.",
        "fr": "app.get() est utilisé pour définir une route GET dans Express.js, prenant un chemin et une fonction de rappel comme paramètres.",
        "ar": "يُستخدم app.get() لتعريف مسار GET في Express.js، ويأخذ مسارًا ودالة استدعاء كمعاملات."
      }
    },
    {
      "id": 5,
      "question": {
        "en": "What does the 'req' parameter represent in an Express route handler?",
        "fr": "Que représente le paramètre 'req' dans un gestionnaire de route Express ?",
        "ar": "ماذا يمثل المعامل 'req' في معالج مسار Express؟"
      },
      "options": [
        "The response object",
        "The request object",
        "The route object",
        "The server object"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "The 'req' parameter represents the HTTP request object, containing information about the incoming request.",
        "fr": "Le paramètre 'req' représente l'objet de requête HTTP, contenant des informations sur la requête entrante.",
        "ar": "يمثل المعامل 'req' كائن طلب HTTP، ويحتوي على معلومات حول الطلب الوارد."
      }
    },
    {
      "id": 6,
      "question": {
        "en": "How do you send a JSON response in Express.js?",
        "fr": "Comment envoyer une réponse JSON dans Express.js ?",
        "ar": "كيف ترسل استجابة JSON في Express.js؟"
      },
      "options": [
        "res.json(data)",
        "res.sendJSON(data)",
        "res.return(data)",
        "res.output(data)"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "res.json() sends a JSON response and automatically sets the Content-Type header to application/json.",
        "fr": "res.json() envoie une réponse JSON et définit automatiquement l'en-tête Content-Type à application/json.",
        "ar": "res.json() يرسل استجابة JSON ويضع تلقائيًا رأس Content-Type إلى application/json."
      }
    },
    {
      "id": 7,
      "question": {
        "en": "What is the purpose of the 'dotenv' package?",
        "fr": "Quel est le but du package 'dotenv' ?",
        "ar": "ما هو الغرض من حزمة 'dotenv'؟"
      },
      "options": [
        "To create environment variables",
        "To load environment variables from a .env file",
        "To validate environment variables",
        "To encrypt environment variables"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "The dotenv package loads environment variables from a .env file into process.env.",
        "fr": "Le package dotenv charge les variables d'environnement d'un fichier .env dans process.env.",
        "ar": "تحمل حزمة dotenv متغيرات البيئة من ملف .env إلى process.env."
      }
    },
    {
      "id": 8,
      "question": {
        "en": "How do you access query parameters in Express.js?",
        "fr": "Comment accéder aux paramètres de requête dans Express.js ?",
        "ar": "كيف تصل إلى معاملات الاستعلام في Express.js؟"
      },
      "options": [
        "req.query.paramName",
        "req.params.paramName",
        "req.body.paramName",
        "req.get.paramName"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "Query parameters are accessed through req.query object in Express.js.",
        "fr": "Les paramètres de requête sont accessibles via l'objet req.query dans Express.js.",
        "ar": "يتم الوصول إلى معاملات الاستعلام من خلال كائن req.query في Express.js."
      }
    },
    {
      "id": 9,
      "question": {
        "en": "What is the purpose of the 'fs' module in Node.js?",
        "fr": "Quel est le but du module 'fs' dans Node.js ?",
        "ar": "ما هو الغرض من وحدة 'fs' في Node.js؟"
      },
      "options": [
        "File system operations",
        "Function system operations",
        "Framework system operations",
        "File server operations"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "The 'fs' module provides an API for interacting with the file system in Node.js.",
        "fr": "Le module 'fs' fournit une API pour interagir avec le système de fichiers dans Node.js.",
        "ar": "توفر وحدة 'fs' واجهة برمجة تطبيقات للتفاعل مع نظام الملفات في Node.js."
      }
    },
    {
      "id": 10,
      "question": {
        "en": "How do you read a file synchronously in Node.js?",
        "fr": "Comment lire un fichier de manière synchrone dans Node.js ?",
        "ar": "كيف تقرأ ملفًا بشكل متزامن في Node.js؟"
      },
      "options": [
        "fs.readFile()",
        "fs.readFileSync()",
        "fs.read()",
        "fs.readSync()"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "fs.readFileSync() reads the entire contents of a file synchronously and returns the contents.",
        "fr": "fs.readFileSync() lit tout le contenu d'un fichier de manière synchrone et retourne le contenu.",
        "ar": "fs.readFileSync() يقرأ المحتوى الكامل للملف بشكل متزامن ويعيد المحتوى."
      }
    },
    {
      "id": 11,
      "question": {
        "en": "What is the purpose of the 'router' in Express.js?",
        "fr": "Quel est le but du 'router' dans Express.js ?",
        "ar": "ما هو الغرض من 'router' في Express.js؟"
      },
      "options": [
        "To create middleware",
        "To organize routes into modular components",
        "To handle database connections",
        "To manage static files"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "The router allows you to organize routes into modular components, making the application more maintainable.",
        "fr": "Le routeur vous permet d'organiser les routes en composants modulaires, rendant l'application plus maintenable.",
        "ar": "يسمح لك الموجه بتنظيم المسارات في مكونات وحدية، مما يجعل التطبيق أكثر قابلية للصيانة."
      }
    },
    {
      "id": 12,
      "question": {
        "en": "How do you create a router in Express.js?",
        "fr": "Comment créer un routeur dans Express.js ?",
        "ar": "كيف تنشئ موجه في Express.js؟"
      },
      "options": [
        "const router = new Router();",
        "const router = express.Router();",
        "const router = require('router');",
        "const router = Router.create();"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "express.Router() creates a new router object that can be used to define routes.",
        "fr": "express.Router() crée un nouvel objet routeur qui peut être utilisé pour définir des routes.",
        "ar": "express.Router() ينشئ كائن موجه جديد يمكن استخدامه لتعريف المسارات."
      }
    },
    {
      "id": 13,
      "question": {
        "en": "What is the purpose of the 'controllers' folder in an Express.js application?",
        "fr": "Quel est le but du dossier 'controllers' dans une application Express.js ?",
        "ar": "ما هو الغرض من مجلد 'controllers' في تطبيق Express.js؟"
      },
      "options": [
        "To store database models",
        "To handle business logic and route handlers",
        "To store static files",
        "To manage environment variables"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "Controllers contain the business logic and handle the processing of requests and responses.",
        "fr": "Les contrôleurs contiennent la logique métier et gèrent le traitement des requêtes et des réponses.",
        "ar": "تحتوي المتحكمات على منطق الأعمال وتتعامل مع معالجة الطلبات والاستجابات."
      }
    },
    {
      "id": 14,
      "question": {
        "en": "How do you access route parameters in Express.js?",
        "fr": "Comment accéder aux paramètres de route dans Express.js ?",
        "ar": "كيف تصل إلى معاملات المسار في Express.js؟"
      },
      "options": [
        "req.query.paramName",
        "req.params.paramName",
        "req.body.paramName",
        "req.route.paramName"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "Route parameters are accessed through req.params object in Express.js.",
        "fr": "Les paramètres de route sont accessibles via l'objet req.params dans Express.js.",
        "ar": "يتم الوصول إلى معاملات المسار من خلال كائن req.params في Express.js."
      }
    },
    {
      "id": 15,
      "question": {
        "en": "What is the purpose of the 'routes' folder in an Express.js application?",
        "fr": "Quel est le but du dossier 'routes' dans une application Express.js ?",
        "ar": "ما هو الغرض من مجلد 'routes' في تطبيق Express.js؟"
      },
      "options": [
        "To store database connections",
        "To organize and define API endpoints",
        "To store static files",
        "To manage middleware"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "The routes folder contains files that define the API endpoints and their associated handlers.",
        "fr": "Le dossier routes contient des fichiers qui définissent les points de terminaison de l'API et leurs gestionnaires associés.",
        "ar": "يحتوي مجلد routes على ملفات تحدد نقاط نهاية API ومعالجاتها المرتبطة."
      }
    },
    {
      "id": 16,
      "question": {
        "en": "How do you start an Express server?",
        "fr": "Comment démarrer un serveur Express ?",
        "ar": "كيف تبدأ خادم Express؟"
      },
      "options": [
        "app.start()",
        "app.listen(port, callback)",
        "app.run(port)",
        "app.serve(port)"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "app.listen() starts a UNIX socket and listens for connections on the specified port.",
        "fr": "app.listen() démarre un socket UNIX et écoute les connexions sur le port spécifié.",
        "ar": "app.listen() يبدأ مأخذ UNIX ويستمع للاتصالات على المنفذ المحدد."
      }
    },
    {
      "id": 17,
      "question": {
        "en": "What is the purpose of the 'models' folder in an Express.js application?",
        "fr": "Quel est le but du dossier 'models' dans une application Express.js ?",
        "ar": "ما هو الغرض من مجلد 'models' في تطبيق Express.js؟"
      },
      "options": [
        "To store route definitions",
        "To define data structures and database schemas",
        "To store static files",
        "To manage middleware"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "The models folder contains files that define data structures, database schemas, and data validation logic.",
        "fr": "Le dossier models contient des fichiers qui définissent les structures de données, les schémas de base de données et la logique de validation des données.",
        "ar": "يحتوي مجلد models على ملفات تحدد هياكل البيانات ومخططات قاعدة البيانات ومنطق التحقق من صحة البيانات."
      }
    },
    {
      "id": 18,
      "question": {
        "en": "How do you handle POST requests in Express.js?",
        "fr": "Comment gérer les requêtes POST dans Express.js ?",
        "ar": "كيف تتعامل مع طلبات POST في Express.js؟"
      },
      "options": [
        "app.post('/path', callback)",
        "app.POST('/path', callback)",
        "app.handlePost('/path', callback)",
        "app.create('/path', callback)"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "app.post() is used to handle POST requests in Express.js, taking a path and a callback function as parameters.",
        "fr": "app.post() est utilisé pour gérer les requêtes POST dans Express.js, prenant un chemin et une fonction de rappel comme paramètres.",
        "ar": "يُستخدم app.post() للتعامل مع طلبات POST في Express.js، ويأخذ مسارًا ودالة استدعاء كمعاملات."
      }
    },
    {
      "id": 19,
      "question": {
        "en": "What is the purpose of the 'middleware' in Express.js?",
        "fr": "Quel est le but du 'middleware' dans Express.js ?",
        "ar": "ما هو الغرض من 'middleware' في Express.js؟"
      },
      "options": [
        "To handle database operations",
        "To process requests and responses between the client and server",
        "To manage static files",
        "To handle authentication only"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "Middleware functions are functions that have access to the request object, response object, and the next middleware function in the application's request-response cycle.",
        "fr": "Les fonctions middleware sont des fonctions qui ont accès à l'objet de requête, l'objet de réponse et la fonction middleware suivante dans le cycle requête-réponse de l'application.",
        "ar": "دوال middleware هي دوال لها إمكانية الوصول إلى كائن الطلب وكائن الاستجابة ودالة middleware التالية في دورة طلب-استجابة التطبيق."
      }
    },
    {
      "id": 20,
      "question": {
        "en": "How do you write data to a file synchronously in Node.js?",
        "fr": "Comment écrire des données dans un fichier de manière synchrone dans Node.js ?",
        "ar": "كيف تكتب بيانات في ملف بشكل متزامن في Node.js؟"
      },
      "options": [
        "fs.writeFile()",
        "fs.writeFileSync()",
        "fs.write()",
        "fs.writeSync()"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "fs.writeFileSync() writes data to a file synchronously, replacing the file if it already exists.",
        "fr": "fs.writeFileSync() écrit des données dans un fichier de manière synchrone, remplaçant le fichier s'il existe déjà.",
        "ar": "fs.writeFileSync() يكتب البيانات في ملف بشكل متزامن، ويستبدل الملف إذا كان موجودًا بالفعل."
      }
    },
    {
      "id": 21,
      "question": {
        "en": "What is the purpose of the 'package.json' file in a Node.js project?",
        "fr": "Quel est le but du fichier 'package.json' dans un projet Node.js ?",
        "ar": "ما هو الغرض من ملف 'package.json' في مشروع Node.js؟"
      },
      "options": [
        "To store application code",
        "To define project metadata and dependencies",
        "To configure the database",
        "To store environment variables"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "package.json contains metadata about the project, including dependencies, scripts, and project information.",
        "fr": "package.json contient des métadonnées sur le projet, y compris les dépendances, les scripts et les informations du projet.",
        "ar": "يحتوي package.json على بيانات وصفية حول المشروع، بما في ذلك التبعيات والنصوص البرمجية ومعلومات المشروع."
      }
    },
    {
      "id": 22,
      "question": {
        "en": "How do you access request body data in Express.js?",
        "fr": "Comment accéder aux données du corps de la requête dans Express.js ?",
        "ar": "كيف تصل إلى بيانات جسم الطلب في Express.js؟"
      },
      "options": [
        "req.query.data",
        "req.params.data",
        "req.body.data",
        "req.data"
      ],
      "correctAnswer": 2,
      "explanation": {
        "en": "Request body data is accessed through req.body object in Express.js, after using middleware like express.json().",
        "fr": "Les données du corps de la requête sont accessibles via l'objet req.body dans Express.js, après avoir utilisé un middleware comme express.json().",
        "ar": "يتم الوصول إلى بيانات جسم الطلب من خلال كائن req.body في Express.js، بعد استخدام middleware مثل express.json()."
      }
    },
    {
      "id": 23,
      "question": {
        "en": "What is the purpose of the 'process.env' object in Node.js?",
        "fr": "Quel est le but de l'objet 'process.env' dans Node.js ?",
        "ar": "ما هو الغرض من كائن 'process.env' في Node.js؟"
      },
      "options": [
        "To store application data",
        "To access environment variables",
        "To manage database connections",
        "To handle file operations"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "process.env is an object containing the user environment variables, allowing access to environment-specific configuration.",
        "fr": "process.env est un objet contenant les variables d'environnement utilisateur, permettant l'accès à la configuration spécifique à l'environnement.",
        "ar": "process.env هو كائن يحتوي على متغيرات بيئة المستخدم، مما يسمح بالوصول إلى التكوين المحدد للبيئة."
      }
    },
    {
      "id": 24,
      "question": {
        "en": "How do you send an error response in Express.js?",
        "fr": "Comment envoyer une réponse d'erreur dans Express.js ?",
        "ar": "كيف ترسل استجابة خطأ في Express.js؟"
      },
      "options": [
        "res.error(message)",
        "res.status(code).send(message)",
        "res.sendError(message)",
        "res.throw(message)"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "res.status() sets the HTTP status code, and res.send() sends the response with the specified message.",
        "fr": "res.status() définit le code de statut HTTP, et res.send() envoie la réponse avec le message spécifié.",
        "ar": "res.status() يضع رمز حالة HTTP، وres.send() يرسل الاستجابة مع الرسالة المحددة."
      }
    },
    {
      "id": 25,
      "question": {
        "en": "What is the purpose of the 'module.exports' in Node.js?",
        "fr": "Quel est le but de 'module.exports' dans Node.js ?",
        "ar": "ما هو الغرض من 'module.exports' في Node.js؟"
      },
      "options": [
        "To import modules",
        "To export functions, objects, or values from a module",
        "To create new modules",
        "To delete modules"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "module.exports is used to export functions, objects, or values from a module so they can be used in other files.",
        "fr": "module.exports est utilisé pour exporter des fonctions, des objets ou des valeurs d'un module afin qu'ils puissent être utilisés dans d'autres fichiers.",
        "ar": "يُستخدم module.exports لتصدير الدوال أو الكائنات أو القيم من وحدة حتى يمكن استخدامها في ملفات أخرى."
      }
    },
    {
      "id": 26,
      "question": {
        "en": "How do you use a router in Express.js?",
        "fr": "Comment utiliser un routeur dans Express.js ?",
        "ar": "كيف تستخدم موجه في Express.js؟"
      },
      "options": [
        "app.use('/path', router)",
        "app.router('/path', router)",
        "app.addRouter('/path', router)",
        "app.setRouter('/path', router)"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "app.use() is used to mount middleware functions and routers at a specified path.",
        "fr": "app.use() est utilisé pour monter des fonctions middleware et des routeurs à un chemin spécifié.",
        "ar": "يُستخدم app.use() لتركيب دوال middleware والموجهات في مسار محدد."
      }
    },
    {
      "id": 27,
      "question": {
        "en": "What is the purpose of the 'find()' method in JavaScript arrays?",
        "fr": "Quel est le but de la méthode 'find()' dans les tableaux JavaScript ?",
        "ar": "ما هو الغرض من الطريقة 'find()' في مصفوفات JavaScript؟"
      },
      "options": [
        "To find all matching elements",
        "To find the first element that satisfies a condition",
        "To find the index of an element",
        "To find the length of an array"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "The find() method returns the first element in the array that satisfies the provided testing function.",
        "fr": "La méthode find() retourne le premier élément du tableau qui satisfait la fonction de test fournie.",
        "ar": "تُرجع الطريقة find() العنصر الأول في المصفوفة الذي يلبي دالة الاختبار المقدمة."
      }
    },
    {
      "id": 28,
      "question": {
        "en": "How do you parse JSON data in JavaScript?",
        "fr": "Comment analyser des données JSON en JavaScript ?",
        "ar": "كيف تحلل بيانات JSON في JavaScript؟"
      },
      "options": [
        "JSON.parse(data)",
        "JSON.parseString(data)",
        "JSON.decode(data)",
        "JSON.read(data)"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "JSON.parse() converts a JSON string into a JavaScript object.",
        "fr": "JSON.parse() convertit une chaîne JSON en objet JavaScript.",
        "ar": "يحول JSON.parse() سلسلة JSON إلى كائن JavaScript."
      }
    },
    {
      "id": 29,
      "question": {
        "en": "What is the purpose of the 'push()' method in JavaScript arrays?",
        "fr": "Quel est le but de la méthode 'push()' dans les tableaux JavaScript ?",
        "ar": "ما هو الغرض من الطريقة 'push()' في مصفوفات JavaScript؟"
      },
      "options": [
        "To remove elements from the end",
        "To add elements to the end of an array",
        "To add elements to the beginning",
        "To sort array elements"
      ],
      "correctAnswer": 1,
      "explanation": {
        "en": "The push() method adds one or more elements to the end of an array and returns the new length of the array.",
        "fr": "La méthode push() ajoute un ou plusieurs éléments à la fin d'un tableau et retourne la nouvelle longueur du tableau.",
        "ar": "تضيف الطريقة push() عنصرًا واحدًا أو أكثر إلى نهاية المصفوفة وتُرجع الطول الجديد للمصفوفة."
      }
    },
    {
      "id": 30,
      "question": {
        "en": "How do you convert a JavaScript object to a JSON string?",
        "fr": "Comment convertir un objet JavaScript en chaîne JSON ?",
        "ar": "كيف تحول كائن JavaScript إلى سلسلة JSON؟"
      },
      "options": [
        "JSON.stringify(object)",
        "JSON.toString(object)",
        "JSON.encode(object)",
        "JSON.write(object)"
      ],
      "correctAnswer": 0,
      "explanation": {
        "en": "JSON.stringify() converts a JavaScript object or value to a JSON string.",
        "fr": "JSON.stringify() convertit un objet ou une valeur JavaScript en chaîne JSON.",
        "ar": "يحول JSON.stringify() كائن أو قيمة JavaScript إلى سلسلة JSON."
      }
    }
  ]
} 